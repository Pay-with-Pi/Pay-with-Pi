npx create-react-app my-app
cd my-app
npm start
npx create-react-app my-app
npm init react-app my-app
yarn create react-app my-app
my-app
├── README.md
├── node_modules
├── package.json
├── .gitignore
├── public
│   ├── favicon.ico
│   ├── index.html
│   └── manifest.json
└── src
    ├── App.css
    ├── App.js
    ├── App.test.js
    ├── index.css
    ├── index.js
    ├── logo.svg
    └── serviceWorker.js
    └── setupTests.js
    
    cd my-app
   <script src="https://sdk.minepi.com/pi-sdk.js"></script>
    <script> Pi.init({ version: "2.0", sandbox: true }) </script>
Next, authenticate the user. Add this in the <head> of your page:
<script> 
        // Authenticate the user, and get permission to request payments from them
        const scopes = ['payments','username'];

        // Read more about this callback in the SDK reference:
        function onIncompletePaymentFound(payment) { 
            console.log('incomplete payment found')
            paymentId = payment.identifier
            txid = payment.transaction.txid
            $.post('/payment/complete',
                    {
                        paymentId: paymentId,
                        txid: txid,
                        debug: 'cancel'
                    }
                )
        };
        Pi.authenticate(scopes, onIncompletePaymentFound).then(function(auth) {
          console.log(`Hi there! You're ready to make payments!`)
          const accessToken = auth.accessToken
        }).catch(function(error) {
          console.error(error);
        });
    </script>
In this code, onIncompletePaymentFound handles any pending payments from this authenticated user. You can select how you handle the payment: Cancel: Cancel, complete, or something else. Keep reading.
Step 6: Handling Payments
Finally - it’s time to handle payments! Payments have four steps. This section has everything you need, but understanding each step can help as you build more complex applications. To learn about each step, click here.
Create Payment:
Use the createPayment function in the Pi SDK. This function takes two arguments: a paymentData object (which includes the amount to be paid, a memo for users, and metadata for your own usage) and an object of callback functions.
const paymentData = {
    amount: number,  /* Pi Amount being Transacted */
    memo: string, /* "Any information that you want to add to payment" */
    metadata: object {}, /* { Special Information: 1234, ... } */
};

// Callbacks the developer needs to implement:
const paymentCallbacks = {
    onReadyForServerApproval,
    onReadyForServerCompletion,
    onCancel,
    onError
    };

Pi.createPayment(paymentData, paymentCallbacks).then(function(payment) {
    console.log(payment)
  }).catch(function(error) {
    console.error(error);
  });
Server-Side Approval:
The onReadyForServerApproval function gets called when the payment id is ready. Your app needs to pass the payment id and other relevant data to your app backend. The payment id should then be shared with the Pi API endpoint /payments/approve’ to signal that the app is ready to proceed with the payment.
const onReadyForServerApproval = (paymentId) => {
    console.log("onReadyForServerApproval", paymentId);
    axiosClient.post('/payments/approve', {paymentId}, config);
  }
User Interaction and Blockchain Transaction:
The Pi browser shows the payment detail page to a user, and we are waiting until the user signs the transaction.
Server-Side Completion:
The onReadyForServerCompletion function gets called after the blockchain transaction has been submitted to the Pi blockchain. Your job is again to pass any relevant data to your app server. On your server, you can verify the payment and deliver the item that was reserved for the user. In the end, you should complete the payment by letting the Pi server know that you have received the payment and delivered the item.
 const onReadyForServerCompletion = (paymentId, txid) => {
    console.log("onReadyForServerCompletion", paymentId, txid);
    axiosClient.post('/payments/complete', {paymentId, txid}, config);
  }
                Git installation

Normally you can just do "make" followed by "make install", and that
will install the git programs in your own ~/bin/ directory.  If you want
to do a global install, you can do

        $ make prefix=/usr all doc info ;# as yourself
        # make prefix=/usr install install-doc install-html install-info ;# as root

(or prefix=/usr/local, of course).  Just like any program suite
that uses $prefix, the built results have some paths encoded,
which are derived from $prefix, so "make all; make prefix=/usr
install" would not work.

The beginning of the Makefile documents many variables that affect the way
git is built.  You can override them either from the command line, or in a
config.mak file.

Alternatively you can use autoconf generated ./configure script to
set up install paths (via config.mak.autogen), so you can write instead

        $ make configure ;# as yourself
        $ ./configure --prefix=/usr ;# as yourself
        $ make all doc ;# as yourself
        # make install install-doc install-html;# as root

If you're willing to trade off (much) longer build time for a later
faster git you can also do a profile feedback build with

        $ make prefix=/usr profile
        # make prefix=/usr PROFILE=BUILD install

This will run the complete test suite as training workload and then
rebuild git with the generated profile feedback. This results in a git
which is a few percent faster on CPU intensive workloads.  This
may be a good tradeoff for distribution packagers.

Alternatively you can run profile feedback only with the git benchmark
suite. This runs significantly faster than the full test suite, but
has less coverage:

        $ make prefix=/usr profile-fast
        # make prefix=/usr PROFILE=BUILD install

Or if you just want to install a profile-optimized version of git into
your home directory, you could run:

        $ make profile-install

or
        $ make profile-fast-install

As a caveat: a profile-optimized build takes a *lot* longer since the
git tree must be built twice, and in order for the profiling
measurements to work properly, ccache must be disabled and the test
suite has to be run using only a single CPU.  In addition, the profile
feedback build stage currently generates a lot of additional compiler
warnings.

Issues of note:

 - Ancient versions of GNU Interactive Tools (pre-4.9.2) installed a
   program "git", whose name conflicts with this program.  But with
   version 4.9.2, after long hiatus without active maintenance (since
   around 1997), it changed its name to gnuit and the name conflict is no
   longer a problem.

   NOTE: When compiled with backward compatibility option, the GNU
   Interactive Tools package still can install "git", but you can build it
   with --disable-transition option to avoid this.

 - You can use git after building but without installing if you want
   to test drive it.  Simply run git found in bin-wrappers directory
   in the build directory, or prepend that directory to your $PATH.
   This however is less efficient than running an installed git, as
   you always need an extra fork+exec to run any git subcommand.

   It is still possible to use git without installing by setting a few
   environment variables, which was the way this was done
   traditionally.  But using git found in bin-wrappers directory in
   the build directory is far simpler.  As a historical reference, the
   old way went like this:

        GIT_EXEC_PATH=`pwd`
        PATH=`pwd`:$PATH
        GITPERLLIB=`pwd`/perl/build/lib
        export GIT_EXEC_PATH PATH GITPERLLIB

 - By default (unless NO_PERL is provided) Git will ship various perl
   scripts. However, for simplicity it doesn't use the
   ExtUtils::MakeMaker toolchain to decide where to place the perl
   libraries. Depending on the system this can result in the perl
   libraries not being where you'd like them if they're expected to be
   used by things other than Git itself.

   Manually supplying a perllibdir prefix should fix this, if this is
   a problem you care about, e.g.:

       prefix=/usr perllibdir=/usr/$(/usr/bin/perl -MConfig -wle 'print substr $Config{installsitelib}, 1 + length $Config{siteprefixexp}')

   Will result in e.g. perllibdir=/usr/share/perl/5.26.1 on Debian,
   perllibdir=/usr/share/perl5 (which we'd use by default) on CentOS.

 - Unless NO_PERL is provided Git will ship various perl libraries it
   needs. Distributors of Git will usually want to set
   NO_PERL_CPAN_FALLBACKS if NO_PERL is not provided to use their own
   copies of the CPAN modules Git needs.

 - Git is reasonably self-sufficient, but does depend on a few external
   programs and libraries.  Git can be used without most of them by adding
   the appropriate "NO_<LIBRARY>=YesPlease" to the make command line or
   config.mak file.

        - "zlib", the compression library. Git won't build without it.

        - "ssh" is used to push and pull over the net.

        - A POSIX-compliant shell is required to run some scripts needed
          for everyday use (e.g. "bisect", "request-pull").

        - "Perl" version 5.8 or later is needed to use some of the
          features (e.g. sending patches using "git send-email",
          interacting with svn repositories with "git svn").  If you can
          live without these, use NO_PERL.  Note that recent releases of
          Redhat/Fedora are reported to ship Perl binary package with some
          core modules stripped away (see http://lwn.net/Articles/477234/),
          so you might need to install additional packages other than Perl
          itself, e.g. Digest::MD5, File::Spec, File::Temp, Net::Domain,
          Net::SMTP, and Time::HiRes.

        - git-imap-send needs the OpenSSL library to talk IMAP over SSL if
          you are using libcurl older than 7.34.0.  Otherwise you can use
          NO_OPENSSL without losing git-imap-send.

        - "libcurl" library is used for fetching and pushing
          repositories over http:// or https://, as well as by
          git-imap-send if the curl version is >= 7.34.0. If you do
          not need that functionality, use NO_CURL to build without
          it.

          Git requires version "7.19.5" or later of "libcurl" to build
          without NO_CURL. This version requirement may be bumped in
          the future.

        - "expat" library; git-http-push uses it for remote lock
          management over DAV.  Similar to "curl" above, this is optional
          (with NO_EXPAT).

        - "wish", the Tcl/Tk windowing shell is used in gitk to show the
          history graphically, and in git-gui.  If you don't want gitk or
          git-gui, you can use NO_TCLTK.

        - A gettext library is used by default for localizing Git. The
          primary target is GNU libintl, but the Solaris gettext
          implementation also works.

          We need a gettext.h on the system for C code, gettext.sh (or
          Solaris gettext(1)) for shell scripts, and libintl-perl for Perl
          programs.

          Set NO_GETTEXT to disable localization support and make Git only
          use English. Under autoconf the configure script will do this
          automatically if it can't find libintl on the system.

        - Python version 2.7 or later is needed to use the git-p4 interface
          to Perforce.

 - Some platform specific issues are dealt with Makefile rules,
   but depending on your specific installation, you may not
   have all the libraries/tools needed, or you may have
   necessary libraries at unusual locations.  Please look at the
   top of the Makefile to see what can be adjusted for your needs.
   You can place local settings in config.mak and the Makefile
   will include them.  Note that config.mak is not distributed;
   the name is reserved for local settings.

 - To build and install documentation suite, you need to have
   the asciidoc/xmlto toolchain.  Because not many people are
   inclined to install the tools, the default build target
   ("make all") does _not_ build them.

   "make doc" builds documentation in man and html formats; there are
   also "make man", "make html" and "make info". Note that "make html"
   requires asciidoc, but not xmlto. "make man" (and thus make doc)
   requires both.

   "make install-doc" installs documentation in man format only; there
   are also "make install-man", "make install-html" and "make
   install-info".

   Building and installing the info file additionally requires
   makeinfo and docbook2X.  Version 0.8.3 is known to work.

   Building and installing the pdf file additionally requires
   dblatex.  Version >= 0.2.7 is known to work.

   All formats require at least asciidoc 8.4.1. Alternatively, you can
   use Asciidoctor (requires Ruby) by passing USE_ASCIIDOCTOR=YesPlease
   to make. You need at least Asciidoctor version 1.5.

   There are also "make quick-install-doc", "make quick-install-man"
   and "make quick-install-html" which install preformatted man pages
   and html documentation. To use these build targets, you need to
   clone two separate git-htmldocs and git-manpages repositories next
   to the clone of git itself.

   The minimum supported version of docbook-xsl is 1.74.

   Users attempting to build the documentation on Cygwin may need to ensure
   that the /etc/xml/catalog file looks something like this:

   <?xml version="1.0"?>
   <!DOCTYPE catalog PUBLIC
      "-//OASIS//DTD Entity Resolution XML Catalog V1.0//EN"
      "http://www.oasis-open.org/committees/entity/release/1.0/catalog.dtd"
   >
   <catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
     <rewriteURI
       uriStartString = "http://docbook.sourceforge.net/release/xsl/current"
       rewritePrefix = "/usr/share/sgml/docbook/xsl-stylesheets"
     />
     <rewriteURI
       uriStartString="http://www.oasis-open.org/docbook/xml/4.5"
       rewritePrefix="/usr/share/sgml/docbook/xml-dtd-4.5"
     />
  </catalog>

  This can be achieved with the following two xmlcatalog commands:

  xmlcatalog --noout \
     --add rewriteURI \
        http://docbook.sourceforge.net/release/xsl/current \
        /usr/share/sgml/docbook/xsl-stylesheets \
     /etc/xml/catalog

  xmlcatalog --noout \
     --add rewriteURI \
         http://www.oasis-open.org/docbook/xml/4.5/xsl/current \
         /usr/share/sgml/docbook/xml-dtd-4.5 \
name: release

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:
  prereqs:
    name: Prerequisites
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set version
        run: echo "version=$(cat VERSION | sed -E 's/.[0-9]+$//')" >> $GITHUB_OUTPUT
        id: version

# ================================
#             macOS
# ================================
  create-macos-artifacts:
    name: Create macOS artifacts
    runs-on: macos-latest
    environment: release
    needs: prereqs
    strategy:
      matrix:
        runtime: [ osx-x64, osx-arm64 ]
    steps:
    - uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: 8.0.x

    - name: Build
      run: |
        dotnet build src/osx/Installer.Mac/*.csproj \
         --configuration=MacRelease --no-self-contained \
         --runtime=${{ matrix.runtime }}

    - name: Run macOS unit tests
      run: |
        dotnet test --configuration=MacRelease

    - name: Lay out payload and symbols
      run: |
        src/osx/Installer.Mac/layout.sh \
         --configuration=MacRelease --output=payload \
         --symbol-output=symbols --runtime=${{ matrix.runtime }}

    - name: Set up signing/notarization infrastructure
      env:
        A1: ${{ secrets.APPLICATION_CERTIFICATE_BASE64 }}
        A2: ${{ secrets.APPLICATION_CERTIFICATE_PASSWORD }}
        I1: ${{ secrets.INSTALLER_CERTIFICATE_BASE64 }}
        I2: ${{ secrets.INSTALLER_CERTIFICATE_PASSWORD }}
        N1: ${{ secrets.APPLE_TEAM_ID }}
        N2: ${{ secrets.APPLE_DEVELOPER_ID }}
        N3: ${{ secrets.APPLE_DEVELOPER_PASSWORD }}
        N4: ${{ secrets.APPLE_KEYCHAIN_PROFILE }}
      run: |
        echo "Setting up signing certificates"
        security create-keychain -p pwd $RUNNER_TEMP/buildagent.keychain
        security default-keychain -s $RUNNER_TEMP/buildagent.keychain
        security unlock-keychain -p pwd $RUNNER_TEMP/buildagent.keychain

        echo $A1 | base64 -D > $RUNNER_TEMP/cert.p12
        security import $RUNNER_TEMP/cert.p12 \
          -k $RUNNER_TEMP/buildagent.keychain \
          -P $A2 \
          -T /usr/bin/codesign
        security set-key-partition-list \
          -S apple-tool:,apple:,codesign: \
          -s -k pwd \
          $RUNNER_TEMP/buildagent.keychain

        echo $I1 | base64 -D > $RUNNER_TEMP/cert.p12
        security import $RUNNER_TEMP/cert.p12 \
          -k $RUNNER_TEMP/buildagent.keychain \
          -P $I2 \
          -T /usr/bin/productbuild
        security set-key-partition-list \
          -S apple-tool:,apple:,productbuild: \
          -s -k pwd \
          $RUNNER_TEMP/buildagent.keychain

        echo "Setting up notarytool"
        xcrun notarytool store-credentials \
          --team-id $N1 \
          --apple-id $N2 \
          --password $N3 \
          "$N4"

    - name: Run codesign against payload
      env:
        A3: ${{ secrets.APPLE_APPLICATION_SIGNING_IDENTITY }}
      run: |
        ./src/osx/Installer.Mac/codesign.sh "payload" "$A3" \
          "$GITHUB_WORKSPACE/src/osx/Installer.Mac/entitlements.xml"

    - name: Create component package
      run: |
        src/osx/Installer.Mac/pack.sh --payload="payload" \
         --version="${{ needs.prereqs.outputs.version }}" \
         --output="components/com.microsoft.gitcredentialmanager.component.pkg"

    - name: Create and sign product archive
      env:
        I3: ${{ secrets.APPLE_INSTALLER_SIGNING_IDENTITY }}
      run: |
        src/osx/Installer.Mac/dist.sh --package-path=components \
         --version="${{ needs.prereqs.outputs.version }}" \
         --runtime="${{ matrix.runtime }}" \
         --output="pkg/gcm-${{ matrix.runtime }}-${{ needs.prereqs.outputs.version }}.pkg" \
         --identity="$I3" || exit 1

    - name: Notarize product archive
      env:
        N4: ${{ secrets.APPLE_KEYCHAIN_PROFILE }}
      run: |
        src/osx/Installer.Mac/notarize.sh \
          --package="pkg/gcm-${{ matrix.runtime }}-${{ needs.prereqs.outputs.version }}.pkg" \
          --keychain-profile="$N4"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.runtime }}-artifacts
        path: |
          ./pkg/*
          ./symbols/*
          ./payload/*

# ================================
#            Windows
# ================================
  create-windows-artifacts:
    name: Create Windows Artifacts
    runs-on: windows-latest
    environment: release
    needs: prereqs
    steps:
    - uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: 8.0.x

    - name: Build
      run: |
        dotnet build --configuration=WindowsRelease

    - name: Run Windows unit tests
      run: |
        dotnet test --configuration=WindowsRelease

    - name: Lay out Windows payload and symbols
      run: |
        cd $env:GITHUB_WORKSPACE\src\windows\Installer.Windows\
        ./layout.ps1 -Configuration WindowsRelease `
          -Output $env:GITHUB_WORKSPACE\payload `
          -SymbolOutput $env:GITHUB_WORKSPACE\symbols

    - name: Log into Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Sign payload files with Azure Code Signing
      uses: azure/trusted-signing-action@v0.4.0
      with:
        endpoint: https://wus2.codesigning.azure.net/
        trusted-signing-account-name: git-fundamentals-signing
        certificate-profile-name: git-fundamentals-windows-signing
        files-folder: ${{ github.workspace }}\payload
        files-folder-filter: exe,dll
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256

    # The Azure Code Signing action overrides the .NET version, so we reset it.
    - name: Set up .NET
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: 8.0.x

    - name: Build with signed payload
      run: |
        dotnet build $env:GITHUB_WORKSPACE\src\windows\Installer.Windows `
          /p:PayloadPath=$env:GITHUB_WORKSPACE\payload /p:NoLayout=true `
          --configuration=WindowsRelease
        mkdir installers
        Move-Item -Path .\out\windows\Installer.Windows\bin\Release\net472\*.exe `
         -Destination $env:GITHUB_WORKSPACE\installers

    - name: Sign installers with Azure Code Signing
      uses: azure/trusted-signing-action@v0.4.0
      with:
        endpoint: https://wus2.codesigning.azure.net/
        trusted-signing-account-name: git-fundamentals-signing
        certificate-profile-name: git-fundamentals-windows-signing
        files-folder: ${{ github.workspace }}\installers
        files-folder-filter: exe
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-artifacts
        path: |
          payload
          installers
          symbols

# ================================
#             Linux
# ================================
  create-linux-artifacts:
    name: Create Linux Artifacts
    runs-on: ubuntu-latest
    environment: release
    needs: prereqs
    steps:
    - uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: 8.0.x

    - name: Build
      run: dotnet build --configuration=LinuxRelease

    - name: Run Linux unit tests
      run: |
        dotnet test --configuration=LinuxRelease

    - name: Log into Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Prepare for GPG signing
      env:
        AZURE_VAULT: ${{ secrets.AZURE_VAULT }}
        GPG_KEY_SECRET_NAME: ${{ secrets.GPG_KEY_SECRET_NAME }}
        GPG_PASSPHRASE_SECRET_NAME: ${{ secrets.GPG_PASSPHRASE_SECRET_NAME }}
        GPG_KEYGRIP_SECRET_NAME: ${{ secrets.GPG_KEYGRIP_SECRET_NAME }}
      run: |
        # Install debsigs
        sudo apt install debsigs

        # Download GPG key, passphrase, and keygrip from Azure Key Vault
        key=$(az keyvault secret show --name $GPG_KEY_SECRET_NAME --vault-name $AZURE_VAULT --query "value")
        passphrase=$(az keyvault secret show --name $GPG_PASSPHRASE_SECRET_NAME --vault-name $AZURE_VAULT --query "value")
        keygrip=$(az keyvault secret show --name $GPG_KEYGRIP_SECRET_NAME --vault-name $AZURE_VAULT --query "value")

        # Remove quotes from downloaded values
        key=$(sed -e 's/^"//' -e 's/"$//' <<<"$key")
        passphrase=$(sed -e 's/^"//' -e 's/"$//' <<<"$passphrase")
        keygrip=$(sed -e 's/^"//' -e 's/"$//' <<<"$keygrip")

        # Import GPG key
        echo "$key" | base64 -d | gpg --import --no-tty --batch --yes

        # Configure GPG
        echo "allow-preset-passphrase" > ~/.gnupg/gpg-agent.conf
        gpg-connect-agent RELOADAGENT /bye
        /usr/lib/gnupg2/gpg-preset-passphrase --preset "$keygrip" <<<"$passphrase"

    - name: Sign Debian package and tarball
      run: |
        # Sign Debian package
        version=${{ needs.prereqs.outputs.version }}
        mv out/linux/Packaging.Linux/Release/deb/gcm-linux_amd64.$version.deb .
        debsigs --sign=origin --verify --check gcm-linux_amd64.$version.deb

        # Generate tarball signature file
        mv -v out/linux/Packaging.Linux/Release/tar/* .
        gpg --batch --yes --armor --output gcm-linux_amd64.$version.tar.gz.asc \
          --detach-sig gcm-linux_amd64.$version.tar.gz

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-artifacts
        path: |
          ./*.deb
          ./*.asc
          ./*.tar.gz

# ================================
#           .NET Tool
# ================================
  dotnet-tool-build:
    name: Build .NET tool
    runs-on: ubuntu-latest
    needs: prereqs
    steps:
    - uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: 8.0.x

    - name: Build .NET tool
      run: |
        src/shared/DotnetTool/layout.sh --configuration=Release

    - name: Upload .NET tool artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tmp.dotnet-tool-build
        path: |
          out/shared/DotnetTool/nupkg/Release

  dotnet-tool-payload-sign:
    name: Sign .NET tool payload
    runs-on: windows-latest
    environment: release
    needs: dotnet-tool-build
    steps:
    - uses: actions/checkout@v4

    - name: Download payload
      uses: actions/download-artifact@v4
      with:
        name: tmp.dotnet-tool-build

    - name: Log into Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install sign CLI tool
      run: |
        dotnet tool install -g sign --version 0.9.1-beta.24325.5

    - name: Sign payload
      run: |
        sign.exe code trusted-signing payload/* `
          -tse https://wus2.codesigning.azure.net/ `
          -tsa git-fundamentals-signing `
          -tscp git-fundamentals-windows-signing

    - name: Lay out signed payload, images, and symbols
      shell: bash
      run: |
        mkdir dotnet-tool-payload-sign
        mv images payload.sym payload -t dotnet-tool-payload-sign

    - name: Upload signed payload
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-tool-payload-sign
        path: |
          dotnet-tool-payload-sign

  dotnet-tool-pack:
    name: Package .NET tool
    runs-on: ubuntu-latest
    needs: [ prereqs, dotnet-tool-payload-sign ]
    steps:
    - uses: actions/checkout@v4

    - name: Download signed payload
      uses: actions/download-artifact@v4
      with:
        name: dotnet-tool-payload-sign
        path: signed

    - name: Set up .NET
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: 8.0.x

    - name: Package tool
      run: |
        src/shared/DotnetTool/pack.sh --configuration=Release \
          --version="${{ needs.prereqs.outputs.version }}" \
          --publish-dir=$(pwd)/signed

    - name: Upload unsigned package
      uses: actions/upload-artifact@v4
      with:
        name: tmp.dotnet-tool-package-unsigned
        path: |
          out/shared/DotnetTool/nupkg/Release/*.nupkg

  dotnet-tool-sign:
    name: Sign .NET tool package
    runs-on: windows-latest
    environment: release
    needs: dotnet-tool-pack
    steps:
    - uses: actions/checkout@v4

    - name: Download unsigned package
      uses: actions/download-artifact@v4
      with:
        name: tmp.dotnet-tool-package-unsigned
        path: nupkg

    - name: Log into Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install sign CLI tool
      run: |
        dotnet tool install -g sign --version 0.9.1-beta.24325.5

    - name: Sign package
      run: |
        sign.exe code trusted-signing nupkg/* `
          -tse https://wus2.codesigning.azure.net/ `
          -tsa git-fundamentals-signing `
          -tscp git-fundamentals-windows-signing

        mv nupkg/* .

    # Remove this once NuGet supports the subscriber identity validation EKU:
    # https://github.com/NuGet/NuGetGallery/issues/10027
    - name: Extract signing certificate from package
      shell: pwsh
      run: |
        dotnet tool install --global Knapcode.CertificateExtractor
        $nupkg = gci *.nupkg
        nuget-cert-extractor --file $nupkg --output certs --code-signing --author --leaf
        $cert = gci certs\*.cer
        mv $cert .\nuget-signing.cer

    - name: Publish signed package and certificate
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-tool-sign
        path: |
          *.nupkg
          *.cer

# ================================
#           Validate
# ================================
  validate:
    name: Validate installers
    strategy:
      matrix:
        component:
          - os: ubuntu-latest
            artifact: linux-artifacts
            command: git-credential-manager
            description: linux
          - os: macos-latest
            artifact: macos-osx-x64-artifacts
            command: git-credential-manager
            description: osx-x64
          - os: windows-latest
            artifact: windows-artifacts
            # Even when a standalone GCM version is installed, GitHub actions
            # runners still only recognize the version bundled with Git for
            # Windows due to its placement on the PATH. For this reason, we use
            # the full path to our installation to validate the Windows version.
            command: "$PROGRAMFILES (x86)/Git Credential Manager/git-credential-manager.exe"
            description: windows
          - os: ubuntu-latest
            artifact: dotnet-tool-sign
            command: git-credential-manager
            description: dotnet-tool
    runs-on: ${{ matrix.component.os }}
    needs: [ create-macos-artifacts, create-windows-artifacts, create-linux-artifacts, dotnet-tool-sign ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4.0.1
        with:
          dotnet-version: 8.0.x

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.component.artifact }}

      - name: Install Windows
        if: contains(matrix.component.description, 'windows')
        shell: pwsh
        run: |
          $exePaths = Get-ChildItem -Path ./installers/*.exe | %{$_.FullName}
          foreach ($exePath in $exePaths)
          {
            Start-Process -Wait -FilePath "$exePath" -ArgumentList "/SILENT /VERYSILENT /NORESTART"
          }

      - name: Install Linux (Debian package)
        if: contains(matrix.component.description, 'linux')
        run: |
          debpath=$(find ./*.deb)
          sudo apt install $debpath
          "${{ matrix.component.command }}" configure

      - name: Install Linux (tarball)
        if: contains(matrix.component.description, 'linux')
        run: |
          # Ensure we find only the source tarball, not the symbols
          tarpath=$(find . -name '*[[:digit:]].tar.gz')
          tar -xvf $tarpath -C /usr/local/bin
          "${{ matrix.component.command }}" configure

      - name: Install macOS
        if: contains(matrix.component.description, 'osx-x64')
        run: |
          # Only validate x64, given arm64 agents are not available
          pkgpath=$(find ./pkg/*.pkg)
          sudo installer -pkg $pkgpath -target /

      - name: Install .NET tool
        if: contains(matrix.component.description, 'dotnet-tool')
        run: |
          nupkgpath=$(find ./*.nupkg)
          dotnet tool install -g --add-source $(dirname "$nupkgpath") git-credential-manager
          "${{ matrix.component.command }}" configure

      - name: Validate
        shell: bash
        run: |
          "${{ matrix.component.command }}" --version | sed 's/+.*//' >actual
          cat VERSION | sed -E 's/.[0-9]+$//' >expect
          cmp expect actual || exit 1

# ================================
#             Publish
# ================================
  create-github-release:
    name: Publish GitHub draft release
    runs-on: ubuntu-latest
    env:
      AZURE_VAULT: ${{ secrets.AZURE_VAULT }}
      GPG_PUBLIC_KEY_SECRET_NAME: ${{ secrets.GPG_PUBLIC_KEY_SECRET_NAME }}
    environment: release
    needs: [ prereqs, validate ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4.0.1
        with:
          dotnet-version: 8.0.x

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Archive macOS payload and symbols
        run: |
          version="${{ needs.prereqs.outputs.version }}"
          mkdir osx-payload-and-symbols

          tar -C macos-osx-x64-artifacts/payload -czf osx-payload-and-symbols/gcm-osx-x64-$version.tar.gz .
          tar -C macos-osx-x64-artifacts/symbols -czf osx-payload-and-symbols/gcm-osx-x64-$version-symbols.tar.gz .

          tar -C macos-osx-arm64-artifacts/payload -czf osx-payload-and-symbols/gcm-osx-arm64-$version.tar.gz .
          tar -C macos-osx-arm64-artifacts/symbols -czf osx-payload-and-symbols/gcm-osx-arm64-$version-symbols.tar.gz .

      - name: Archive Windows payload and symbols
        run: |
          version="${{ needs.prereqs.outputs.version }}"
          mkdir win-x86-payload-and-symbols
          zip -jr win-x86-payload-and-symbols/gcm-win-x86-$version.zip windows-artifacts/payload
          zip -jr win-x86-payload-and-symbols/gcm-win-x86-$version-symbols.zip windows-artifacts/symbols

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download GPG public key signature file
        run: |
          az keyvault secret show --name "$GPG_PUBLIC_KEY_SECRET_NAME" \
            --vault-name "$AZURE_VAULT" --query "value" \
            | sed -e 's/^"//' -e 's/"$//' | base64 -d >gcm-public.asc
          mv gcm-public.asc linux-artifacts

      - uses: actions/github-script@v7
        with:
          script: |
            co
